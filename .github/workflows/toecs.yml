name: container to ecs
on: 
  push: 
    branches: 
      - main
#  pull_request:
#    branches: [main]
#    types: [opened, synchronize]
  workflow_dispatch:
env:
  docker_pass: ${{ secrets.DOCKER_PASS }}
  docker_user: ${{ secrets.DOCKER_USERNAME }}
  app_name: ${{ vars.IMAGE_NAME }}
jobs:
   avoid_redundancy:
     runs-on: ubuntu-latest ##ubuntu-20.04
     steps:
       - name: Cancel Workflow Action
         uses: styfle/cancel-workflow-action@0.12.1
         with:
           access_token: ${{ github.token }}

   flake8-lint:
     runs-on: ubuntu-latest
     steps:
       - name: Check out source repository
         uses: actions/checkout@v4
       - name: Set up Python environment
         uses: actions/setup-python@v4
         with:
           python-version: "3.13"
       - name: flake8 Lint
         uses: py-actions/flake8@v2

   sonarcloud:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v4
         with:
           # Disabling shallow clone is recommended for improving relevancy of reporting
           fetch-depth: 0
       - name: SonarCloud Scan
         uses: sonarsource/sonarcloud-github-action@v3.1.0 # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/sonarcloud-scan
         env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

   unit-test:
     needs: [flake8-lint,sonarcloud]
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v4
       - uses: actions/setup-python@v5
         with:
           python-version: "3.13"
           cache: 'pip'
       - name: run very simple unit test
         run: |
           pip install -r requirements.txt
           python -m unittest tests/unit_test_app.py

   build-push:
     needs: [unit-test,e2e-test]
     runs-on: ubuntu-latest
     steps:
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v3
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3
       - name: login to docker hub
         uses: docker/login-action@v3
         with:
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PASS }}
       - name: build and push image
         uses: docker/build-push-action@v6
         with:
           push: true
           tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:latest

   trivy-image-check:
     needs: [build-push]
     runs-on: ubuntu-latest
     steps:
       - name: Run Trivy vulnerability scanner
         run: |
           wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
           sudo dpkg -i trivy_0.57.0_Linux-64bit.deb
           trivy image --severity CRITICAL --exit-code 0 --format sarif --output trivy-report.sarif $docker_user/$app_name:latest
       - name: Upload Vulnerability Scan Results
         uses: actions/upload-artifact@v4
         with:
           name: trivy-report
           path: trivy-report.sarif
           retention-days: 1

   e2e-test:
     needs: [flake8-lint,sonarcloud]
     runs-on: ubuntu-latest
     services:
       selenium:
         image: selenium/standalone-chrome:latest
         ports:
           - 4444:4444
         options: >-
           --health-cmd="curl -s http://localhost:4444/wd/hub/status | grep 'ready' || exit 1"
           --health-interval=5s
           --health-timeout=5s
           --health-retries=3

       app:
         image: lroquec/cicd-tests:latest
         ports:
           - 5000:5000
         options: >-
           --health-cmd="curl -s http://localhost:5000 | grep "Python" || exit 1"
           --health-interval=10s
           --health-timeout=5s
           --health-retries=5
     steps:
       - uses: actions/checkout@v4       
       - uses: actions/setup-python@v5
         with:
           python-version: 3.13
           cache: 'pip'
       - name: install requirements with pip
         run: |
           pip install selenium
           pip install pytest
       - name: Run Selenium Tests
         env:
           SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
         run: |
           python3 -m pytest tests/ -s --junitxml=report.xml
       - name: Upload Selenium results
         uses: actions/upload-artifact@v4
         with:
           name: selenium-test-results
           path: test-reports/
           retention-days: 1

   deploy-ecs-dev:
     if: ${{ github.event_name == 'push' }}
     needs: [trivy-image-check]
     runs-on: ubuntu-latest
     steps:
       - name: setup aws cli
         run: |
           hostname
       - name: deploy to ecs
         run: |
           date