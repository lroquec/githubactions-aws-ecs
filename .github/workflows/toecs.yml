name: container to AWS ECS Fargate
on: 
  push: 
    branches: 
      - main
  pull_request:
    branches: [main]
    types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  docker_pass: ${{ secrets.DOCKER_PASS }}
  docker_user: ${{ secrets.DOCKER_USERNAME }}
  app_name: ${{ vars.IMAGE_NAME }}

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: flake8 Lint
        uses: py-actions/flake8@v2

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3.1.0 # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/sonarcloud-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  unit-test:
    needs: [flake8-lint,sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: run very simple unit test
        run: |
          pip install -r requirements.txt
          python -m unittest tests/unit_test_app.py

  build-push:
    needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: build and push image fot testing
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:test

  trivy-image-check:
    needs: [build-push]
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.0_Linux-64bit.deb
          trivy image --severity CRITICAL --exit-code 0 --format sarif --output trivy-report.sarif $docker_user/$app_name:test

      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.sarif
          retention-days: 1

  e2e-test:
    needs: [trivy-image-check]
    runs-on: ubuntu-latest
    container:
      image: python:3.13
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: >-
          --health-cmd="curl -s http://localhost:4444/wd/hub/status | grep 'ready' || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=3
        env:
          SE_OPENTELEMETRY_TRACING: 0

      myapp:
        image: lroquec/cicd-tests:test
        ports:
          - 5000:5000
        options: >-
          --health-cmd="curl -f http://127.0.0.1:5000 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4

      - name: install requirements with pip
        run: |
          pip install selenium
          pip install pytest

      - name: Run Selenium Tests
        env:
          SELENIUM_REMOTE_URL: http://selenium:4444/wd/hub
        run: |
          python3 -m pytest tests/ -s --junitxml=report.xml

      - name: Upload Selenium results
        uses: actions/upload-artifact@v4
        with:
          name: selenium-test-results
          path: test-reports/
          retention-days: 1

  deploy-ecs-dev:
    if: ${{ github.event_name == 'push'}}
    runs-on: ubuntu-latest
    needs: [e2e-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login in DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: build and push image ready for deploy
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}

      - name: Configure credentials for AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Obtain and clean current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition MyflaskApp \
            --query 'taskDefinition' \
            --output json > task-def-temp.json
          jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-def-temp.json > task-def.json

      - name: Update task definition with new image tag
        run: |
          IMAGE_TAG=${{ github.sha }}
          jq --arg IMAGE "${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE' task-def.json > new-task-def.json

      - name: Register new task definition
        id: register-task-def
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json > register-task-def.json
          echo "task-def-arn=$(jq -r '.taskDefinition.taskDefinitionArn' register-task-def.json)" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster MyECSCluster \
            --service MyECSService \
            --task-definition ${{ steps.register-task-def.outputs.task-def-arn }}
